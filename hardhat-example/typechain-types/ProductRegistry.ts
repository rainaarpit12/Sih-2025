/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ProductRegistry {
  export type ProductStruct = {
    id: BigNumberish;
    name: string;
    category: string;
    dateOfManufacture: string;
    timeOfManufacture: string;
    place: string;
    qualityRating: string;
    priceForFarmer: BigNumberish;
    description: string;
    farmer: AddressLike;
    isAvailable: boolean;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type ProductStructOutput = [
    id: bigint,
    name: string,
    category: string,
    dateOfManufacture: string,
    timeOfManufacture: string,
    place: string,
    qualityRating: string,
    priceForFarmer: bigint,
    description: string,
    farmer: string,
    isAvailable: boolean,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    id: bigint;
    name: string;
    category: string;
    dateOfManufacture: string;
    timeOfManufacture: string;
    place: string;
    qualityRating: string;
    priceForFarmer: bigint;
    description: string;
    farmer: string;
    isAvailable: boolean;
    createdAt: bigint;
    updatedAt: bigint;
  };

  export type FarmerStruct = {
    farmerAddress: AddressLike;
    name: string;
    contactInfo: string;
    totalProducts: BigNumberish;
    isRegistered: boolean;
  };

  export type FarmerStructOutput = [
    farmerAddress: string,
    name: string,
    contactInfo: string,
    totalProducts: bigint,
    isRegistered: boolean
  ] & {
    farmerAddress: string;
    name: string;
    contactInfo: string;
    totalProducts: bigint;
    isRegistered: boolean;
  };

  export type RetailerInfoStruct = {
    retailerName: string;
    storageConditions: string;
    retailPrice: BigNumberish;
    retailerLocation: string;
    dateOfArrival: string;
    retailerAddress: AddressLike;
    updatedAt: BigNumberish;
  };

  export type RetailerInfoStructOutput = [
    retailerName: string,
    storageConditions: string,
    retailPrice: bigint,
    retailerLocation: string,
    dateOfArrival: string,
    retailerAddress: string,
    updatedAt: bigint
  ] & {
    retailerName: string;
    storageConditions: string;
    retailPrice: bigint;
    retailerLocation: string;
    dateOfArrival: string;
    retailerAddress: string;
    updatedAt: bigint;
  };
}

export interface ProductRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "categoryProducts"
      | "farmerProducts"
      | "farmers"
      | "getAllProducts"
      | "getAvailableProducts"
      | "getContractStats"
      | "getFarmerInfo"
      | "getProduct"
      | "getProductWithRetailerInfo"
      | "getProductsByCategory"
      | "getProductsByFarmer"
      | "getProductsCountByCategory"
      | "getProductsCountByFarmer"
      | "getRetailerInfo"
      | "getTotalProducts"
      | "isProductAvailable"
      | "nextProductId"
      | "owner"
      | "products"
      | "registerFarmer"
      | "registerProduct"
      | "retailerInfo"
      | "updateProduct"
      | "updateProductAvailability"
      | "updateRetailerInfo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FarmerRegistered"
      | "ProductRegistered"
      | "ProductUpdated"
      | "RetailerInfoUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "categoryProducts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "farmerProducts",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "farmers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProducts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableProducts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFarmerInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductWithRetailerInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductsByCategory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductsByFarmer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductsCountByCategory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductsCountByFarmer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRetailerInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalProducts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isProductAvailable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextProductId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFarmer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProduct",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "retailerInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProduct",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProductAvailability",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRetailerInfo",
    values: [BigNumberish, string, string, BigNumberish, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "categoryProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmerProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farmers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFarmerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProductWithRetailerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductsByCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductsByFarmer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductsCountByCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductsCountByFarmer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRetailerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProductAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextProductId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerFarmer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retailerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProductAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRetailerInfo",
    data: BytesLike
  ): Result;
}

export namespace FarmerRegisteredEvent {
  export type InputTuple = [
    farmerAddress: AddressLike,
    name: string,
    contactInfo: string
  ];
  export type OutputTuple = [
    farmerAddress: string,
    name: string,
    contactInfo: string
  ];
  export interface OutputObject {
    farmerAddress: string;
    name: string;
    contactInfo: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductRegisteredEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    category: string,
    dateOfManufacture: string,
    timeOfManufacture: string,
    place: string,
    qualityRating: string,
    priceForFarmer: BigNumberish,
    description: string,
    farmer: AddressLike
  ];
  export type OutputTuple = [
    id: bigint,
    name: string,
    category: string,
    dateOfManufacture: string,
    timeOfManufacture: string,
    place: string,
    qualityRating: string,
    priceForFarmer: bigint,
    description: string,
    farmer: string
  ];
  export interface OutputObject {
    id: bigint;
    name: string;
    category: string;
    dateOfManufacture: string;
    timeOfManufacture: string;
    place: string;
    qualityRating: string;
    priceForFarmer: bigint;
    description: string;
    farmer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductUpdatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    priceForFarmer: BigNumberish,
    qualityRating: string,
    isAvailable: boolean,
    updatedAt: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    priceForFarmer: bigint,
    qualityRating: string,
    isAvailable: boolean,
    updatedAt: bigint
  ];
  export interface OutputObject {
    id: bigint;
    priceForFarmer: bigint;
    qualityRating: string;
    isAvailable: boolean;
    updatedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RetailerInfoUpdatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    retailerName: string,
    storageConditions: string,
    retailPrice: BigNumberish,
    retailerLocation: string,
    dateOfArrival: string,
    retailerAddress: AddressLike
  ];
  export type OutputTuple = [
    id: bigint,
    retailerName: string,
    storageConditions: string,
    retailPrice: bigint,
    retailerLocation: string,
    dateOfArrival: string,
    retailerAddress: string
  ];
  export interface OutputObject {
    id: bigint;
    retailerName: string;
    storageConditions: string;
    retailPrice: bigint;
    retailerLocation: string;
    dateOfArrival: string;
    retailerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProductRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ProductRegistry;
  waitForDeployment(): Promise<this>;

  interface: ProductRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  categoryProducts: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  farmerProducts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  farmers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, boolean] & {
        farmerAddress: string;
        name: string;
        contactInfo: string;
        totalProducts: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;

  getAllProducts: TypedContractMethod<
    [],
    [ProductRegistry.ProductStructOutput[]],
    "view"
  >;

  getAvailableProducts: TypedContractMethod<
    [],
    [ProductRegistry.ProductStructOutput[]],
    "view"
  >;

  getContractStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalProducts: bigint;
        totalFarmers: bigint;
        availableProducts: bigint;
      }
    ],
    "view"
  >;

  getFarmerInfo: TypedContractMethod<
    [_farmer: AddressLike],
    [ProductRegistry.FarmerStructOutput],
    "view"
  >;

  getProduct: TypedContractMethod<
    [_id: BigNumberish],
    [ProductRegistry.ProductStructOutput],
    "view"
  >;

  getProductWithRetailerInfo: TypedContractMethod<
    [_id: BigNumberish],
    [
      [
        ProductRegistry.ProductStructOutput,
        ProductRegistry.RetailerInfoStructOutput
      ]
    ],
    "view"
  >;

  getProductsByCategory: TypedContractMethod<
    [_category: string],
    [ProductRegistry.ProductStructOutput[]],
    "view"
  >;

  getProductsByFarmer: TypedContractMethod<
    [_farmer: AddressLike],
    [ProductRegistry.ProductStructOutput[]],
    "view"
  >;

  getProductsCountByCategory: TypedContractMethod<
    [_category: string],
    [bigint],
    "view"
  >;

  getProductsCountByFarmer: TypedContractMethod<
    [_farmer: AddressLike],
    [bigint],
    "view"
  >;

  getRetailerInfo: TypedContractMethod<
    [_id: BigNumberish],
    [ProductRegistry.RetailerInfoStructOutput],
    "view"
  >;

  getTotalProducts: TypedContractMethod<[], [bigint], "view">;

  isProductAvailable: TypedContractMethod<
    [_id: BigNumberish],
    [boolean],
    "view"
  >;

  nextProductId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        string,
        string,
        boolean,
        bigint,
        bigint
      ] & {
        id: bigint;
        name: string;
        category: string;
        dateOfManufacture: string;
        timeOfManufacture: string;
        place: string;
        qualityRating: string;
        priceForFarmer: bigint;
        description: string;
        farmer: string;
        isAvailable: boolean;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  registerFarmer: TypedContractMethod<
    [_name: string, _contactInfo: string],
    [void],
    "nonpayable"
  >;

  registerProduct: TypedContractMethod<
    [
      _name: string,
      _category: string,
      _dateOfManufacture: string,
      _timeOfManufacture: string,
      _place: string,
      _qualityRating: string,
      _priceForFarmer: BigNumberish,
      _description: string
    ],
    [void],
    "nonpayable"
  >;

  retailerInfo: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, string, string, bigint] & {
        retailerName: string;
        storageConditions: string;
        retailPrice: bigint;
        retailerLocation: string;
        dateOfArrival: string;
        retailerAddress: string;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  updateProduct: TypedContractMethod<
    [
      _id: BigNumberish,
      _priceForFarmer: BigNumberish,
      _qualityRating: string,
      _isAvailable: boolean
    ],
    [void],
    "nonpayable"
  >;

  updateProductAvailability: TypedContractMethod<
    [_id: BigNumberish, _isAvailable: boolean],
    [void],
    "nonpayable"
  >;

  updateRetailerInfo: TypedContractMethod<
    [
      _id: BigNumberish,
      _retailerName: string,
      _storageConditions: string,
      _retailPrice: BigNumberish,
      _retailerLocation: string,
      _dateOfArrival: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "categoryProducts"
  ): TypedContractMethod<[arg0: string, arg1: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "farmerProducts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "farmers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, boolean] & {
        farmerAddress: string;
        name: string;
        contactInfo: string;
        totalProducts: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllProducts"
  ): TypedContractMethod<[], [ProductRegistry.ProductStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAvailableProducts"
  ): TypedContractMethod<[], [ProductRegistry.ProductStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getContractStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalProducts: bigint;
        totalFarmers: bigint;
        availableProducts: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFarmerInfo"
  ): TypedContractMethod<
    [_farmer: AddressLike],
    [ProductRegistry.FarmerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProduct"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [ProductRegistry.ProductStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProductWithRetailerInfo"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [
        ProductRegistry.ProductStructOutput,
        ProductRegistry.RetailerInfoStructOutput
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProductsByCategory"
  ): TypedContractMethod<
    [_category: string],
    [ProductRegistry.ProductStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProductsByFarmer"
  ): TypedContractMethod<
    [_farmer: AddressLike],
    [ProductRegistry.ProductStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProductsCountByCategory"
  ): TypedContractMethod<[_category: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProductsCountByFarmer"
  ): TypedContractMethod<[_farmer: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRetailerInfo"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [ProductRegistry.RetailerInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalProducts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isProductAvailable"
  ): TypedContractMethod<[_id: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextProductId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        string,
        string,
        boolean,
        bigint,
        bigint
      ] & {
        id: bigint;
        name: string;
        category: string;
        dateOfManufacture: string;
        timeOfManufacture: string;
        place: string;
        qualityRating: string;
        priceForFarmer: bigint;
        description: string;
        farmer: string;
        isAvailable: boolean;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerFarmer"
  ): TypedContractMethod<
    [_name: string, _contactInfo: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerProduct"
  ): TypedContractMethod<
    [
      _name: string,
      _category: string,
      _dateOfManufacture: string,
      _timeOfManufacture: string,
      _place: string,
      _qualityRating: string,
      _priceForFarmer: BigNumberish,
      _description: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "retailerInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, string, string, bigint] & {
        retailerName: string;
        storageConditions: string;
        retailPrice: bigint;
        retailerLocation: string;
        dateOfArrival: string;
        retailerAddress: string;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateProduct"
  ): TypedContractMethod<
    [
      _id: BigNumberish,
      _priceForFarmer: BigNumberish,
      _qualityRating: string,
      _isAvailable: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProductAvailability"
  ): TypedContractMethod<
    [_id: BigNumberish, _isAvailable: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRetailerInfo"
  ): TypedContractMethod<
    [
      _id: BigNumberish,
      _retailerName: string,
      _storageConditions: string,
      _retailPrice: BigNumberish,
      _retailerLocation: string,
      _dateOfArrival: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FarmerRegistered"
  ): TypedContractEvent<
    FarmerRegisteredEvent.InputTuple,
    FarmerRegisteredEvent.OutputTuple,
    FarmerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ProductRegistered"
  ): TypedContractEvent<
    ProductRegisteredEvent.InputTuple,
    ProductRegisteredEvent.OutputTuple,
    ProductRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ProductUpdated"
  ): TypedContractEvent<
    ProductUpdatedEvent.InputTuple,
    ProductUpdatedEvent.OutputTuple,
    ProductUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RetailerInfoUpdated"
  ): TypedContractEvent<
    RetailerInfoUpdatedEvent.InputTuple,
    RetailerInfoUpdatedEvent.OutputTuple,
    RetailerInfoUpdatedEvent.OutputObject
  >;

  filters: {
    "FarmerRegistered(address,string,string)": TypedContractEvent<
      FarmerRegisteredEvent.InputTuple,
      FarmerRegisteredEvent.OutputTuple,
      FarmerRegisteredEvent.OutputObject
    >;
    FarmerRegistered: TypedContractEvent<
      FarmerRegisteredEvent.InputTuple,
      FarmerRegisteredEvent.OutputTuple,
      FarmerRegisteredEvent.OutputObject
    >;

    "ProductRegistered(uint256,string,string,string,string,string,string,uint256,string,address)": TypedContractEvent<
      ProductRegisteredEvent.InputTuple,
      ProductRegisteredEvent.OutputTuple,
      ProductRegisteredEvent.OutputObject
    >;
    ProductRegistered: TypedContractEvent<
      ProductRegisteredEvent.InputTuple,
      ProductRegisteredEvent.OutputTuple,
      ProductRegisteredEvent.OutputObject
    >;

    "ProductUpdated(uint256,uint256,string,bool,uint256)": TypedContractEvent<
      ProductUpdatedEvent.InputTuple,
      ProductUpdatedEvent.OutputTuple,
      ProductUpdatedEvent.OutputObject
    >;
    ProductUpdated: TypedContractEvent<
      ProductUpdatedEvent.InputTuple,
      ProductUpdatedEvent.OutputTuple,
      ProductUpdatedEvent.OutputObject
    >;

    "RetailerInfoUpdated(uint256,string,string,uint256,string,string,address)": TypedContractEvent<
      RetailerInfoUpdatedEvent.InputTuple,
      RetailerInfoUpdatedEvent.OutputTuple,
      RetailerInfoUpdatedEvent.OutputObject
    >;
    RetailerInfoUpdated: TypedContractEvent<
      RetailerInfoUpdatedEvent.InputTuple,
      RetailerInfoUpdatedEvent.OutputTuple,
      RetailerInfoUpdatedEvent.OutputObject
    >;
  };
}
